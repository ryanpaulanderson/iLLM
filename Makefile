# Makefile for this repository to generate an Xcode project and run iOS unit tests rapidly
#
# This repo ships sources only. We auto-generate an Xcode project with XcodeGen (using [project.yml](project.yml:1)).
#
# Quickstart (from repo root):
#   make quicktest                # generate project (if needed) + run tests on iOS simulator
#   make test                     # run tests (auto-generates project if missing)
#   make project                  # (re)generate LLMChat.xcodeproj via XcodeGen
#
# Requirements:
#   - Xcode 16+
#   - Xcode command line tools
#   - XcodeGen (install with: brew install xcodegen)

# -----------------------
# Configurable parameters
# -----------------------
GEN_PROJECT     ?= LLMChat.xcodeproj    # Project generated by XcodeGen (from name: in project.yml)
GEN_SPEC        ?= project.yml          # The XcodeGen spec in this repo
SCHEME          ?= LLMChat              # Default scheme generated by XcodeGen
CONFIG          ?= Debug
DEVICE          ?= iPhone 16            # Simulator device name
OS              ?= latest               # Or a version like 18.0
DERIVED_DATA    ?= .build/DerivedData
RESULT_BUNDLE   ?= .build/TestResults

# Allow overrides for external projects/workspaces, but default to generated project
WORKSPACE       ?=
PROJECT         ?=

# -----------------------
# Normalized variables
# -----------------------
SCHEME_S := $(strip $(SCHEME))
DEVICE_S := $(strip $(DEVICE))
OS_S     := $(strip $(OS))
GEN_PROJECT_S := $(strip $(GEN_PROJECT))
GEN_SPEC_S    := $(strip $(GEN_SPEC))
PROJECT_S     := $(strip $(PROJECT))
WORKSPACE_S   := $(strip $(WORKSPACE))

# Determine project spec preference:
# 1) WORKSPACE if provided
# 2) PROJECT if provided
# 3) Fallback to generated project: GEN_PROJECT
ifeq ($(WORKSPACE_S),)
  ifeq ($(PROJECT_S),)
    PROJ_SPEC := -project "$(GEN_PROJECT_S)"
    USE_GEN_PROJECT := yes
  else
    PROJ_SPEC := -project "$(PROJECT_S)"
    USE_GEN_PROJECT := no
  endif
else
  PROJ_SPEC := -workspace "$(WORKSPACE_S)"
  USE_GEN_PROJECT := no
endif

DEST := platform=iOS Simulator,name=$(DEVICE_S),OS=$(OS_S)

# -----------------------
# Helpers
# -----------------------
#.SILENT:

.PHONY: help ensure-xcodegen ensure-project project open-sim boot-sim list-schemes list-destinations build build-for-testing test test-without-building test-fast quicktest coverage clean install run install-and-run

help:
	@echo "Make targets:"
	@echo "  project                Generate $(GEN_PROJECT_S) from $(GEN_SPEC_S) using XcodeGen"
	@echo "  list-schemes           List schemes in the current project/workspace"
	@echo "  list-destinations      Show available simulator destinations for SCHEME"
	@echo "  build                  Build the app (no tests) for the specified simulator"
	@echo "  build-for-testing      Build test bundles with coverage"
	@echo "  test                   Build and run tests (auto-generates project if missing)"
	@echo "  test-without-building  Run tests against last build-for-testing output"
	@echo "  test-fast              build-for-testing then test-without-building"
	@echo "  quicktest              Generate project if needed, then run tests (fast path)"
	@echo "  open-sim               Launch the Simulator app"
	@echo "  boot-sim               Boot/wait for a simulator (best-effort)"
	@echo "  install                Build and install the app to the simulator"
	@echo "  run                    Launch the installed app in the simulator"
	@echo "  install-and-run        Build, install, and launch the app (recommended)"
	@echo "  coverage               Print JSON coverage from last .xcresult"
	@echo "  clean                  Clean DerivedData and result bundles"
	@echo ""
	@echo "Variables (override as needed):"
	@echo "  SCHEME, CONFIG, DEVICE, OS, DERIVED_DATA, RESULT_BUNDLE, WORKSPACE, PROJECT"
	@echo ""
	@echo "Examples:"
	@echo "  make quicktest"
	@echo "  make test DEVICE='iPhone 15 Pro' OS=latest"
	@echo "  make install-and-run"
	@echo "  make list-destinations"

ensure-xcodegen:
	@if ! command -v xcodegen >/dev/null 2>&1; then \
		echo "ERROR: XcodeGen is not installed. Install with: brew install xcodegen"; \
		exit 1; \
	fi

ensure-project: ensure-xcodegen
	# If we are using the generated project, ensure it exists; otherwise no-op.
	@if [ "$(USE_GEN_PROJECT)" = "yes" ]; then \
		if [ ! -d "$(GEN_PROJECT_S)" ]; then \
			echo "Generating $(GEN_PROJECT_S) from $(GEN_SPEC_S) ..."; \
			xcodegen generate --spec "$(GEN_SPEC_S)"; \
		fi; \
	fi

project: ensure-xcodegen
	@echo "Generating $(GEN_PROJECT_S) from $(GEN_SPEC_S) ..."
	@xcodegen generate --spec "$(GEN_SPEC_S)"
	@echo "Done."

list-schemes: ensure-project
	@xcodebuild $(PROJ_SPEC) -list

list-destinations: ensure-project
	@xcodebuild $(PROJ_SPEC) -scheme "$(SCHEME_S)" -showdestinations

open-sim:
	@open -a Simulator

boot-sim: open-sim
	@# Best-effort wait until any simulator is booted (no-op if already booted)
	@xcrun simctl bootstatus booted -b || true

build: ensure-project
	@xcodebuild $(PROJ_SPEC) \
		-scheme "$(SCHEME_S)" \
		-configuration "$(CONFIG)" \
		-destination '$(DEST)' \
		-derivedDataPath "$(DERIVED_DATA)" \
		build

build-for-testing: ensure-project
	@xcodebuild $(PROJ_SPEC) \
		-scheme "$(SCHEME_S)" \
		-configuration "$(CONFIG)" \
		-destination '$(DEST)' \
		-derivedDataPath "$(DERIVED_DATA)" \
		-enableCodeCoverage YES \
		build-for-testing

test: ensure-project
	@xcodebuild $(PROJ_SPEC) \
		-scheme "$(SCHEME_S)" \
		-configuration "$(CONFIG)" \
		-destination '$(DEST)' \
		-derivedDataPath "$(DERIVED_DATA)" \
		-resultBundlePath "$(RESULT_BUNDLE)" \
		-enableCodeCoverage YES \
		test

test-without-building: ensure-project
	@xcodebuild $(PROJ_SPEC) \
		-scheme "$(SCHEME_S)" \
		-configuration "$(CONFIG)" \
		-destination '$(DEST)' \
		-derivedDataPath "$(DERIVED_DATA)" \
		-resultBundlePath "$(RESULT_BUNDLE)" \
		-enableCodeCoverage YES \
		test-without-building

test-fast: build-for-testing test-without-building

# One command to do it all for this repo as-is
quicktest: boot-sim test

coverage:
	@if [ -d "$(RESULT_BUNDLE).xcresult" ]; then \
		echo "Coverage report (JSON):"; \
		xcrun xccov view --report --json "$(RESULT_BUNDLE).xcresult" | python3 -m json.tool; \
	else \
		echo "No result bundle found at $(RESULT_BUNDLE).xcresult. Run 'make test' first."; \
	fi

# Install the app to the simulator
install: ensure-project boot-sim
	@echo "Building and installing $(SCHEME_S) to simulator..."
	@xcodebuild $(PROJ_SPEC) \
		-scheme "$(SCHEME_S)" \
		-configuration "$(CONFIG)" \
		-destination '$(DEST)' \
		-derivedDataPath "$(DERIVED_DATA)" \
		build
	@# Find the app bundle and install it
	@APP_PATH=$$(find "$(DERIVED_DATA)/Build/Products" -name "$(SCHEME_S).app" -type d | head -n 1); \
	if [ -z "$$APP_PATH" ]; then \
		echo "Error: Could not find $(SCHEME_S).app in build products"; \
		exit 1; \
	else \
		echo "Installing $$APP_PATH to simulator..."; \
		DEVICE_ID=$$(xcrun simctl list devices | grep -E "$(DEVICE_S).*Booted" | grep -oE "[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}" | head -n 1); \
		if [ -z "$$DEVICE_ID" ]; then \
			echo "Waiting for simulator to boot..."; \
			xcrun simctl boot "$(DEVICE_S)" 2>/dev/null || true; \
			sleep 5; \
			DEVICE_ID=$$(xcrun simctl list devices | grep -E "$(DEVICE_S).*Booted" | grep -oE "[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}" | head -n 1); \
		fi; \
		xcrun simctl install "$$DEVICE_ID" "$$APP_PATH"; \
		echo "App installed successfully!"; \
	fi

# Launch the installed app in the simulator
run:
	@echo "Launching $(SCHEME_S) in simulator..."
	@DEVICE_ID=$$(xcrun simctl list devices | grep -E "$(DEVICE_S).*Booted" | grep -oE "[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}" | head -n 1); \
	if [ -z "$$DEVICE_ID" ]; then \
		echo "Error: No booted simulator found for '$(DEVICE_S)'. Run 'make boot-sim' first."; \
		exit 1; \
	fi; \
	xcrun simctl launch --console "$$DEVICE_ID" com.example.$(SCHEME_S) || \
	xcrun simctl launch --console "$$DEVICE_ID" "com.example.$(SCHEME_S)" 2>/dev/null || \
	echo "Note: If launch failed, check the bundle identifier in project.yml (currently trying: com.example.$(SCHEME_S))"

# Build, install, and run the app (convenience target)
install-and-run: install run
	@echo "$(SCHEME_S) is now running in the simulator!"

clean:
	@echo "Cleaning build artifacts and result bundles..."
	@if [ -n "$(SCHEME_S)" ]; then \
		xcodebuild $(PROJ_SPEC) -scheme "$(SCHEME_S)" -configuration "$(CONFIG)" clean || true; \
	fi
	@rm -rf "$(DERIVED_DATA)" "$(RESULT_BUNDLE).xcresult"